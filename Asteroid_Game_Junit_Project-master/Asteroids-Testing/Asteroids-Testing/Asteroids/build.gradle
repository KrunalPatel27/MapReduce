/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.1/userguide/tutorial_java_projects.html
 */


// Apply the java plugin to add support for Java
apply plugin: 'maven'
apply plugin:'application'
apply plugin: 'jacoco'

group = 'src.org.psnbtech'
version = '1.0.0-SNAPSHOT'

description = """wordcloud"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
/*
configurations{
    emma
}*/

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'junit:junit:4.12'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    //emma "emma:emma:2.0.5312"
    //emma "emma:emma_ant:2.0.5312"
}
sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test{
        java{
            srcDir 'test'
        }
    }
}
mainClassName = "org.psnbtech.Game"

/*test{
    testLogging{
        showStandardStreams = true
        events 'PASSED'
    }
}
*/
test.dependsOn 'clean'
classes.mustRunAfter 'clean'

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/reports/jacoco")
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}






/*
def emmaConvention = new EmmaPluginConvention(project)
project.convention.plugins.emma = emmaConvention

class EmmaPluginConvention{
    def verbosityLevel = "info"
    def reportPath;
    def coverageFileName;
    def tmpDir;
    def instrDir;
    def metaDataFilePath;

    def emma(Closure close){
        close.delegate = this;
        close.run()
    }

    EmmaPluginConvention(Project project){
        reportPath 			= "${project.reporting.baseDir}/emma"
        coverageFileName	= "coverage"
        tmpDir				= "${project.buildDir}/tmp/emma"
        instrDir			= "${tmpDir}/instr"
        metaDataFilePath 	= "${tmpDir}/metadata.emma"
    }
}

test{
    //setup JVM Arguments for emma coverage
    jvmArgs "-Demma.coverage.out.file=${emmaConvention.metaDataFilePath}", "-Demma.coverage.out.merge=true", "-noverify"

    //add
    doFirst{
        ant.taskdef( resource:"emma_ant.properties", classpath: configurations.emma.asPath)
        ant.path(id:"run.classpath"){
            pathelement(location:sourceSets.main.output.classesDir.absolutePath )
        }
        ant.emma(verbosity:"${emmaConvention.verbosityLevel}"){
            instr(merge:"true", destdir:"${emmaConvention.instrDir}", instrpathref:"run.classpath", metadatafile:"${emmaConvention.metaDataFilePath}"){
                instrpath{
                    fileset(dir:sourceSets.main.output.classesDir.absolutePath, includes:"*.class")
                }
            }
        }
        setClasspath(files("${emmaConvention.instrDir}") + configurations.emma +  getClasspath())
    }

    doLast{
        ant.path(id:"src.path"){
            sourceSets.main.java.srcDirs.each{
                pathelement(location:it.absolutePath )
            }
        }
        ant.emma(enabled:"true"){

            report(sourcepathref:"src.path"){
                fileset(dir:"${emmaConvention.tmpDir}"){
                    include(name:"*.emma")
                }
                txt(outfile:"${emmaConvention.reportPath}/coverage.txt")
                html(outfile:"${emmaConvention.reportPath}/coverage.html")
                xml(outfile:"${emmaConvention.reportPath}/coverage.xml")
            }
        }
    }
}


*/